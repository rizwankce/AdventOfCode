import Cocoa

let input = """
                                       L N           Q     O     W   M       F
                                       W G           V     W     F   Q       F
  #####################################.#.###########.#####.#####.###.#######.#######################################
  #.......#.#...........#...#.#.#.......#.....#.....#.....#.....#.#...#.....#.........#...#.....#.#.#.#...#.....#.#.#
  #.#####.#.###########.###.#.#.###.#########.###.#####.#######.#.###.#.#.#####.#######.###.#####.#.#.#.###.#####.#.#
  #...#.#.#...#.#.#.#...#...............#.....#.........#.....#.#.#.....#.#.............#.......#.#...#.#.....#.#...#
  ###.#.#####.#.#.#.###.###.#.#########.###.#####.#########.#.#.#.#######.###.#####.#######.#####.#.###.###.#.#.#.###
  #.#.#.........#...........#...#.......#.......#...#.......#...#.#...#.....#.#.#.#.#.#.#.....#.#.#...#...#.#.#.#.#.#
  #.#.###.#.###.###.#.#.#####.#####.###.#######.###.#######.#.###.#.#######.#.#.#.###.#.###.###.#.#.###.#.#.###.#.#.#
  #.....#.#...#.....#.#.#...#.#.....#.....#...#.#...#...#...#.#.......#.....#.........................#.#.#...#.#...#
  #.#.#########.###.###.###.###.###.#######.#.#.###.#.#.#.#########.#####.###.###.#.#.###.#.#######.###.###.###.#.###
  #.#.#.#.......#...#...#.......#.......#...#.....#...#.#.#.......#.#...#...#.#.#.#.#...#.#.#.#...#.........#.....#.#
  ###.#.#.#.###.###########.#######.#.###.###.#########.#.#.###.###.###.###.#.#.#############.###.#####.###.###.###.#
  #.#.#.#.#...#.#...........#...#...#.#.....#.#.#...#...#.....#.#...#.......#.......#.#.#.....#.#.....#.#.#.#.#.#...#
  #.#.#.###.###.#.#####.###.###.###.#####.#####.#.#.#.#########.#.#####.###.###.#####.#.#.#####.###.#####.###.#.#.###
  #.#...#...#...#.....#.#...#.........#.#.......#.#.....#.......#.#.....#.#...#.....#.#.#...........#...#.#.#.....#.#
  #.#.#.###########.###########.#.#.###.###.#####.###.###.#######.###.###.#.###.#####.#.#.###.###.#.#.###.#.###.###.#
  #...#.#.......#.....#.........#.#.....#.....#.#.#...#.......#...#.#.#.#.#.#.....#...#...#.....#.#.......#.#.....#.#
  ###.###.#.#######.###.###.#.###.###.###.#####.#.###.#####.#.###.#.#.#.#.###.#####.###.#.#######.#########.###.###.#
  #...#...#.#.......#...#...#.#.....#.#.#...#.....#.....#...#.#.....#...#...#...#.#.....#.......#...#.#.#.#.#.#.#.#.#
  ###.###.#####.###.#########.#######.#.#.#######.#######.#.#######.#.#####.#.###.#.#################.#.#.#.#.#.#.#.#
  #...#.#...#.#.#.#.#...#.#.#.#.#.......#.#.#.....#.#...#.#...#.....#.#.#.............#...#.#.....#.......#.#.#.#...#
  ###.#.#.###.###.#.###.#.#.###.###.###.#.#.#####.#.###.###.#####.#.#.#.###.#######.###.###.#.###.#.#.#.###.#.#.#.###
  #.#.#.#.#.#.....#.#.......#...#.#.#...#.#.#.#.......#.#...#.....#.#...#.#.#...#.....#.#.......#.#.#.#...#.....#.#.#
  #.#.#.#.#.###.###########.###.#.#.#####.#.#.#.###.###.#.#######.###.###.#.###.#.###.#.#.#.###.#######.###.#.#.#.#.#
  #.....#.........#.#.#...............#.....#.#.#...#...........#...#...#.#.#.....#.#.#.#.#.#.........#...#.#.#...#.#
  #.#####.#.#######.#.#######.###.###.#####.#.###.#######.#.#.###.###.###.#####.#.#.###.#.#.###.###.#####.#####.###.#
  #...#...#.....#.......#.....#...#.#...#...#.........#.#.#.#.#.....#.........#.#.........#...#...#.#.......#...#.#.#
  #.#######.#######.###.###.###.###.#.#####.#######.###.#.#######.###.#############.#######.#########.#######.###.#.#
  #...#.....#.#.....#...#.#.#...#.#.#.....#.#.......#.#.........#.#.#.....#.......#.#.#...#...#.#...#...#.#...#.#.#.#
  ###.###.###.#####.#####.#######.#.#.###.#.#####.###.#####.#.###.#.###.#####.###.#.#.#.#######.###.#.#.#.###.#.#.#.#
  #.....#.#...#.....#.....#.............#.#.....#.........#.#.#.....#.....#.....#.......#.#...#...#.#.#...#...#.#...#
  ###.#.#.#.#.#####.#####.#.###.#######.#####.#######.#######.#####.###.#####.###########.#.#####.#.###.#.#.###.###.#
  #...#.#...#.....#.#.#...#.#.#.#      P     Q       O       P     F   A     M        #...#...#.......#.#.#.#.......#
  ###.#####.###.###.#.#.#####.###      C     V       W       B     F   Y     P        ###.#.#####.#######.#.###.###.#
  #...#.#...#.#.#...#.#.#...#...#                                                     #.....#.....#.#.#...#...#.#....PB
  ###.#.#.###.#####.#.#.###.#.###                                                     #.###.###.###.#.#.###.#####.#.#
  #.#.........#.#.#.............#                                                   MQ..#...........#.#.....#.....#..AA
  #.#.#####.###.#.#####.#.#######                                                     #.#.###.#.#.###.#####.#.###.###
GG....#.#...#...#.....#.#.....#.#                                                     #.#.#...#.#.....#.#.#.#.#.#.#.#
  #.###.#####.#####.#####.#####.#                                                     ###.#######.#####.#.#.###.#.#.#
  #...#...#.#.#.....#.#...#......LE                                                   #.#.#...#.#...................#
  #.#####.#.#.###.###.#.#.#.#.#.#                                                     #.###.###.#####################
SS..#.....#...#...#.....#...#.#..EC                                                 LJ..#...........#...#...#.......#
  #.#.#.###.#.###.###.###.#######                                                     #.#.#.#####.#.#.#.#.###.#.#####
  #...#.....#.........#.#.#.....#                                                     #...#.#.#...#...#...#...#.#....PC
  #####################.###.#.###                                                     #.#####.#####.#.###.#.#.#.###.#
  #.......#...#.........#.#.#...#                                                     #.....#...#...#.#...#.#.#.#...#
  ###.###.#.#.#.###.#.#.#.###.#.#                                                     #.#####.#.#####.###.#.###.#.###
  #.#.#...#.#...#...#.#.#...#.#.#                                                     #...#.#.#...#...#.....#.....#.#
  #.#.#.###.#.#.#####.###.###.#.#                                                     #####.#.#######.#.###.#####.#.#
NW....#...#.#.#.....#.#...#.#.#.#                                                   NW....#.#...#.....#.#...#.#...#.#
  #.#.###.#.#.###.###.###.#.#.#.#                                                     #.###.#.#.###.#.#.#.#.#.#.#.#.#
  #.#.#.....#.#.#.#.#.........#..BB                                                   #.#.#.#.#.#.#.#.#.#.#.#.#.#.#..LE
  ###.#########.###.#############                                                     #.#.#.#.###.###########.#####.#
  #.#.#...................#......LV                                                   #...........#.#...#.#...#.#.#.#
  #.#####.#######.#####.###.#####                                                     #####.#####.#.###.#.#.###.#.#.#
LB............#...#.#...#...#...#                                                     #...#.#.#.....................#
  #.#####.#.#.###.#.###.###.#.#.#                                                     #.#####.###.###################
  #...#...#.#...#.#.#.#.#.#...#.#                                                   UJ........#.#.#.....#...#.......#
  #.#####.###.###.#.#.#.#.#####.#                                                     #.###.#.#.###.###.#.#.#.###.#.#
  #...#.....#.#...#.#.#.........#                                                     #...#.#.........#...#.....#.#.#
  ###.#.#######.###.#.#######.#.#                                                     #.###.#####.###.#.#.#######.#.#
  #...#.#.#...#.#.#.......#...#.#                                                     #...#.#.#...#...#.#.#...#.#.#..BB
  #.#.###.#.#####.#.#.###.#######                                                     #######.#######.#.#####.#.#####
  #.#...#.#.#.#.#.#.#...#...#....GG                                                 JY..#...........#.#...#.....#....CD
  #######.#.#.#.#.#.#####.#####.#                                                     #.###.###.###.#########.#.###.#
AY..#.#...#.#.#.......#...#.#...#                                                     #.#.#.#.....#.#.#.#.....#.#...#
  #.#.###.#.#.#.#.#.#####.#.#.###                                                     #.#.#.#####.###.#.###.#.#.#.#.#
  #.............#.#...#.#.....#.#                                                     #.......#...#.....#.#.#.#...#.#
  ###########.#####.###.#.#.###.#                                                     #####.###.#####.###.###.###.###
  #.........#...#...#...#.#.#.#.#                                                     #.#...#.................#.#.#.#
  #####.###.#########.#######.#.#                                                     #.#######.#.#.#####.#####.#.#.#
  #.....#...#.#.#.#.....#...#.#..LB                                                   #...#.#.#.#.#...#.....#...#.#.#
  #.#.#.#.###.#.#.###.#####.#.#.#                                                     #.#.#.#.#####.#####.###.#.###.#
DD..#.#.#.#...#...#.#.#.......#.#                                                     #.#.........#.#.#...#.#.#.#...#
  #.#####.#.#.#.###.#.###.###.#.#                                                     #.###.#########.#####.#.#.#.#.#
  #...#.....#...............#...#                                                   DD..#.....#.#.#.#.#.....#.#.#.#..UJ
  ###.###########################                                                     ###.#####.#.#.#.#.#.###.#.#.###
  #.#.#...#.........#...........#                                                     #.................#.....#.....#
  #.###.#.#.#######.#.#####.#####                                                     #.#.#.#.###############.#######
  #.....#...#...#...#.#.#...#....GK                                                   #.#.#.#.#.........#.#.#.#.....#
  #.#.#########.###.#.#.#.###.###                                                     #########.#####.###.#.###.###.#
  #.#.....#.............#.....#.#                                                   LW..#...#.....#.........#...#....LV
  #.###.#.###.#.#.#.###.#.#.#.#.#                                                     #.#.###.#.#.###.#.###.#.###.###
JY..#.#.#...#.#.#.#...#.#.#.#...#                                                     #.....#.#.#...#.#.#...#.#...#..ZZ
  #.#.###.###.#.###.###.###.#####                                                     #.###.#.###.#######.###.#.###.#
  #.....#.#.#.#...#...#...#.....#                                                     #...#.....#.#...........#.....#
  #.#.#####.#.#####.###.###.#.###      A       N           C       S X     W          #.#####.#######.#.###.#.#####.#
  #.#...#.....#.......#...#.#.#.#      L       G           D       S Z     F          #.#...........#.#.#...#.#.....#
  ###.###.#.#.###.#.###.#.###.#.#######.#######.###########.#######.#.#####.###########.###.#.#.#.###.#.###.#######.#
  #.....#.#.#.#...#.#...#.#.....#...........#.........#...#.#.......#.....#.....#...#.#...#.#.#.#.#.#.#.#.....#.#...#
  ###.#.#####.#.###.#.#.#.###.#.#.#.###.###.###.###.###.###.#.###########.#.#####.###.###.###.#####.###.###.#.#.###.#
  #...#...#...#...#.#.#.#.#...#.#.#...#...#.#.#.#...#.......#...........#.#.#.#.......#.....#...#.......#...#...#...#
  ###.#######.#.#.###.###.###.#########.###.#.#####.###.###.#.#.#.###.###.#.#.#.#.#.#.#######.#########.###.#.#####.#
  #.#...#...#.#.#.#...#.#.#.........#.#.#.....#.#.#.#.....#.#.#.#.#.#...#.#.....#.#.#.#.......#...........#.#.#.....#
  #.#.#####.#.###.#.#.#.#############.#####.###.#.#.#.#######.#####.#####.#####.#########.#.#.#########.###.#######.#
  #.......#.....#.#.#.#.#...#.#.#.#...#.#.......#...#...#.#.#...#.........#.............#.#.#.#...#.......#...#.#...#
  ###.#####.#####.#####.###.#.#.#.###.#.#.###.#####.#.#.#.#.#.###########.#.#############.#.#.###.###.###.###.#.#.#.#
  #.....#.......#.#.......#.......#.........#.#.#...#.#...#.........#.....#...........#.#.#.#.#.#.....#.#.#...#...#.#
  ###.###.#.###.#.###.#######.###.#.#######.###.###.###.#########.#######.###.#########.#####.#.#.#.#.#.###.###.#.#.#
  #.....#.#.#.#.#.#.#...#.#.#.#.....#...#.....#.......#...#.#.......#.#.#.#.#...#...#.#...#...#...#.#...#.#...#.#.#.#
  ###.#######.#####.###.#.#.#######.###.###.#######.###.#.#.#.#######.#.#.#.###.#.###.#.#####.#####.#.#.#.#####.#.#.#
  #.......#.................#.....#.#.#.#.....#.....#.#.#...#.......#.......#.#...#.......#.....#...#.#.......#.#.#.#
  #.#.#############.###.#.#.#.#.#.###.#.#.#####.#.###.###.#.#.#.#####.###.#.#.#.###.#####.###.###.#####.#.###.#.###.#
  #.#.........#...#...#.#.#...#.#...#.#.#.....#.#.....#...#.#.#.#...#.#...#.#.......#...#.#.....#...#...#...#.#.#...#
  #.###.#######.#.#.###############.#.#.#.#.#######.#######.#.###.#######.#####.#.###.#################.#########.#.#
  #.#.....#.....#.#.#...#...#.............#.#.........#.....#.....#.........#.#.#.....#.#.......#.......#.#.#.#.#.#.#
  ###.###########.#####.###.###.#.#.#.###########.#.#######.###.#.###.#.#####.###.#.###.#####.#.#######.#.#.#.#.#####
  #.......#...#.#...#.....#.#...#.#.#...#.....#...#.....#...#...#.#...#...#...#.#.#.#.#...#...#.#.....#...#.#.....#.#
  #.#.#######.#.#.#######.#.#######.#.#.#.#.#.#.###.#######.#.###########.#.###.#.###.#.#####.###.#.#.###.#.#.#.###.#
  #.#.....#.......#...#.#...#.#.#...#.#...#.#.#.#.....#...#.#.....#.#.........#...#.....#.....#.#.#.#.#.......#.....#
  #.#.###.#######.#.###.###.#.#.###########.#####.#####.###.###.#.#.#.#####.###.#####.#######.#.#.#######.#####.###.#
  #.#...#.....#.......#...........#.#.....#.#.......#...#...#...#.#.......#.#.......#.#.#.#...#...#.#...#.#...#.#...#
  #.#####.#######.###.#.#.###.###.#.###.#.#.#.###.###.#.#.###.#########.#.#######.###.#.#.###.#.###.#.#####.#####.#.#
  #.#.......#.....#.....#.#...#.........#...#...#.#.#.#.#...#.......#...#.......#.....#.#.......#...#.#.#...#...#.#.#
  #.#########.#.#.#############.#.###.#####.###.#.#.#.#.#.#.#####.#######.#.#####.#.#.#.#.###.#.###.#.#.###.#.#####.#
  #.#.#.#.....#.#...#.....#.....#.#.......#.#...#.#...#...#.#.........#...#.#...#.#.#...#...#.#...........#.......#.#
  ###.#.#########.###.#####.###.#####.###.###.#######.#############.#####.###.#.#.#####.#.#.###.#######.###.#.###.###
  #...............#.........#...#.....#...#.......#...........#.....#.....#...#.......#...#...#.....#.......#...#...#
  #####################################.#########.#####.#########.#####.#####.#######################################
                                       X         E     A         M     L     G
                                       Z         C     L         P     J     K                                         
""".components(separatedBy: "\n").map { $0.map { String($0)}}

enum Direction: Int, CaseIterable {
    case north  = 1
    case south  = 2
    case west = 3
    case east = 4

    func next() -> Self {
        switch self {
        case .north:
            return .south
        case .south :
            return .west
        case .west:
            return .east
        case .east:
            return .north
        }
    }
}

struct Point: CustomStringConvertible, Equatable, Hashable {
    var x: Int
    var y: Int

    var description: String {
        get {
            return "X: \(self.x) Y: \(self.y)"
        }
    }

    func move(_ direction: Direction) -> Point {
        switch direction {
        case .north:
            return Point.init(x: x, y: y + 1)
        case .south:
            return Point.init(x: x, y: y - 1)
        case .west:
            return Point.init(x: x - 1, y: y)
        case .east:
            return Point.init(x: x + 1, y: y)
        }
    }

    var up: Self { .init(x: x, y: y - 1) }
    var down: Self { .init(x: x, y: y + 1) }
    var left: Self { .init(x: x - 1, y: y) }
    var right: Self { .init(x: x + 1, y: y) }

    var neighbours: [Self] { [up, left, right, down] }
}
let alphabets = "abcedfghijklmnopqrstuvwxyz".uppercased()
var grid: [Point: String] = [:]
for i in 0..<input.count {
    for j in 0..<input[i].count {
        grid[Point.init(x: i, y: j)] = input[i][j]
    }
}
let maxRow = input.count - 1
let maxCol = input[0].count - 1
print(grid)

func combos<T>(elements: ArraySlice<T>, k: Int) -> [[T]] {
    if k == 0 {
        return [[]]
    }

    guard let first = elements.first else {
        return []
    }

    let head = [first]
    let subcombos = combos(elements: elements, k: k - 1)
    var ret = subcombos.map { head + $0 }
    ret += combos(elements: elements.dropFirst(), k: k)

    return ret
}

func combos<T>(elements: Array<T>, k: Int) -> [[T]] {
    return combos(elements: ArraySlice(elements), k: k)
}

func neighbours4(_ grid: [Point: String], _ point: Point) -> [Point] {
    var points: [Point] = []
    Direction.allCases.forEach { (direction) in
        let pos = point.move(direction)
        if grid[pos, default:"#"] != "#" {
            points.append(pos)
        }

    }
    return points
}
struct Portal: Hashable, CustomStringConvertible {
    var label: String
    var side: String
    var description: String {
        get {
            return "\(label):\(side)"
        }
    }
}
func portalFrom(_ grid: [Point: String], point: Point) -> Portal? {
    guard grid[point] == "." else { return nil }
    var valid = false
    var pos1: Point!
    var l1: String!
    neighbours4(grid, point).map { p in
        if alphabets.contains(grid[p, default: ""]) {
            pos1 = p
            l1 = grid[p]
            valid = true
            return
        }
    }
    guard valid else { return nil }
    var pos2: Point!
    var l2: String!
    neighbours4(grid, pos1).map { p in
        if alphabets.contains(grid[p, default: ""]) {
            pos2 = p
            l2 = grid[p]
            return
        }
    }
    var key: String = ""
    if pos2.x > pos1.x || pos2.y > pos1.y {
        key = l1 + l2
    }
    else {
        key = l2 + l1
    }

    if pos2.x == 0 || pos2.y == 0 || pos2.x == maxRow || pos2.y == maxCol {
        return Portal.init(label: key, side: "out")
    }
    return Portal.init(label: key, side: "in")
}

func findAjacent(_ grid: [Point: String], _ src: Point) -> [(steps:Int,portal:Portal)] {
    var visited: [Point] = [src]
    var queue = Array<(steps:Int,point:Point)>()
    var found = Array<(steps:Int,portal:Portal)>()

    neighbours4(grid, src).map { queue.insert((steps:1,point:$0), at: 0) }

    while !queue.isEmpty {
        let tuple = queue.removeLast()
        let point = tuple.point
        let steps = tuple.steps
//        print(point)
        if !visited.contains(point) {
            visited.append(point)

            let portal = portalFrom(grid, point: point)
            var valid = true
            found.map { t in
                if t.portal == portal {
                    valid = false
                }
            }
            if portal != nil && valid {
                found.append((steps:steps,portal:portal!))
                continue
            }
            else {
                neighbours4(grid, point).map { p in
                    if !visited.contains(p) {
                        queue.insert((steps: steps+1,point:p), at: 0)
                    }
                }
            }
        }
    }
    return found
}

func build(_ grid: [Point: String]) -> [Portal: [(steps:Int,portal:Portal)]] {
    var graph :[Portal: [(steps:Int,portal:Portal)]] = [:]

    grid.keys.forEach { (point) in
        guard let portal = portalFrom(grid, point: point) else { return }
        graph[portal] = findAjacent(grid, point)
    }
    return graph
}

var graph = build(grid)
var start: Portal!
var end: Portal!
print(graph)
for portal in graph.keys {
    if portal.label == "AA" {
        start = portal
    }
    else if portal.label == "ZZ" {
        end = portal
    }
}

let combination = combos(elements:Array(graph.keys) , k: 2)
combination.forEach { (t) in
    if t[0].label == t[1].label {
        graph[t[0]]?.append((1,t[1]))
        graph[t[1]]?.append((1,t[0]))
    }
}

//print(graph.keys)
func steps(_ graph: [Portal: [(steps:Int,portal:Portal)]], _ start: Portal, _ end: Portal) -> Int {
    var queue = Array<(steps:Int,portal:Portal)>()
    queue.insert((steps:0,portal:start), at: 0)
    var visited: Set<Portal> = []
    var distance: [Portal: Int] = [:]
    distance[start] = 0

    while !queue.isEmpty {
        let tuple = queue.removeLast()
        let steps = tuple.steps
        let portal = tuple.portal

        if portal == end {
            return steps
        }

        if !visited.contains(portal) {
            visited.insert(portal)
            print(portal)
            print(steps)
            print(graph[portal]!)
            var current: (steps: Int, portal: Portal)?
            graph[portal].map { tuple in
                current = tuple.first { (p) -> Bool in
                    return !visited.contains(p.portal)
                }
                print("current : \(current)")
            }
            if let current = current {
                let newDist = steps + current.steps
                if newDist < distance[current.portal, default: Int.max] {
                    distance[current.portal] = newDist
                    queue.insert((steps:newDist, portal: current.portal), at: 0)
                }
            }
        }
    }

    return -1
}

let result = steps(graph, start, end)
print("OMG \(result)")
