import Cocoa

let input = #"""
#.|..#...|#...#...|.|....|..|...#.|...#..|.|.|.|#.
.....|.#...|....#|....||#.|###.......#.#|.##.|...|
...#|.....||..|..|||.#......#..|.#..|..|..#.....|.
..|..#.....###.#|.....|.|...##.##......|#...|##...
....###.......|...|..||...#||.##..|.|.|.#|..|.#...
|..|#......|#.|..#.#....||...|.#||....|#....#.#...
.|..#.|.|..|.#|.#|.#......#..###.|||.#.|.....#...#
..|.|.....||......|...|#....|....##.|.|..|..#.#...
.......##.#..|.|.........|...|..#|.|#.#..||#|...|.
.|###|...|.....|..#.|..|#...|.............|.......
|........##.|.#.##.|##.##..#|..#|.|..|.|....|.....
|.....#|#..#|.|..#..#|...|.#..|#.........|#....|..
..|.#........#........#..||#|.#.........#.|#||.|||
.|##...#..||.....|.|..|..|...|...|..#.....#.###|..
..#|.#|#...|#.|||#..#|#...##.|||#...#.|.|...#.|...
...|...#|..###...#.....|..|...|#..........|..|.|..
#||||.|#.##|....|..||...|##|.....|.|#||..##..||.||
.||.#..|..|||#.#.#|....#..##|#|...|.|#..||..#...#.
..#..#.||.|...|.|||.|#|..#..|.#.........|...#.#|..
|...||#.####||.......#..|#|.#|..|#..#.|....###|#|.
.|.|||.#..#..#.####.##..|#||.#..|#...|...||....|..
.....||#|...#.##........|..##...#...|..##|#.##....
..|#.|#....|##.#|#.#|..#.#......|#....###.##...#.|
..|.#....##...|||..|.#|#..|..|..||#.....#.#..#....
..|..||..##....#.......#..|......|...#.#.##...||#.
..............######|#...|###.##......#...#.|..#.|
.#..|......##..#..||###|.||....#...||..#.##.#.#.||
##.##......##.#|..|.#.#....|#|#|..|#.##|...|.||#..
|.#...##.|#|.|..|.||.|||.......##..#.#..|...##.|..
....#...#...#||.#.#..#...##.#.#...|#.#..#...|..#.|
....#....|.....||.....|.|#.|.|..||..|#........|...
..#...#...|...###.|..#.#.||||....|.....#|........|
##|#..#.#|#..|.||..||..|.||##..##|#.|.##|....#....
|.#|#||.#...#|...#...#|.##.|..##..||#.||#|......|#
|#|..|.||...#...|####...#....#|...|..#..##...|###.
....##.#.|..|......##...|#.###..#....|###.##.||##|
|..#....#..|#.........|....|....##...#....#.#..|..
.......|..|..#...#....##..#.|.#|..#..|.#.#..|||...
..##||.....#..|....|..|#.|#...#.#|....#|#..||#..|.
.#...##.#..#..#..#..|#..#.......||...#.#.|.##...|.
#..|.#.#...#.|...##|..#.#|##.......|.|..#.|#.....#
..|...#|..#|...#......#..#....|.|.#..#..|#|...#..#
.#..##.|.#.##|..##..||.....|#|.|...|..|..#.....|##
.....#...|....|..|..........##.#..|..###.||#...#|#
.#....|......#.#.#.#..#..#..|.....|..|..|.|...#..#
#|....##....###......#.|..|.#..|..|..|||.##.#....#
.|||##.||......#|.#...|......|...|...#.#..#..#..|#
|.#...#|.#|.##......##...#....|.|..|....#.||#.....
.#..|.|.|...|#..#.####|..#..###.....#.##...###.#..
.#.........|.#......|...##.#|...|.####..|...#.###|
"""#.components(separatedBy: .newlines)

//print(input)

struct Point: CustomStringConvertible, Equatable, Hashable {
    var x: Int
    var y: Int

    var description: String {
        get {
            return "(X:\(self.x) Y:\(self.y))"
        }
    }

    func neighbours() -> [Point] {
        var points: [Point] = []
        for x in [-1,0,1] {
            for y in [-1,0,1] {
                points.append(Point.init(x: self.x + x, y: self.y + y))
            }
        }
        points.removeAll(where: { $0 == self })
        return points
    }
}

struct Grid {
    typealias Cell = [Point: Character]

    var grid: Cell = [:]
    var rowCount: Int = 0
    var colCount: Int = 0

    init(_ input: [String]) {
        input.enumerated().forEach { (i,line) in
            line.enumerated().forEach { (j,char) in
                let p = Point.init(x: i, y: j)
                grid[p] = char
            }
        }
        self.rowCount = grid.keys.map { $0.x }.max()!
        self.colCount = grid.keys.map { $0.y }.max()!
    }

    func debugPrint() {
        print("grid start")
        print("rc", separator: "", terminator: " ")
        (0 ... colCount).forEach {
            print($0, separator: " ", terminator: " ")
        }
        print("\n\n")
        for r in (0 ... rowCount) {
            print(r, separator: " ", terminator: "  ")
            for c in (0 ... colCount) {
                let p = Point(x: r, y: c)
                print(grid[p]!, separator: " ", terminator: " ")
            }
            print("\n")
        }
        print("grid end")
    }

    mutating func tick() {
        var new: [Point: Character] = [:]

        for p in grid.keys {
            let ad = p.neighbours().filter { grid.keys.contains($0) }

            if grid[p] == "." {
                let count = ad.map { grid[$0] }.filter { $0 == "|" }.count
                if count >= 3 {
                    new[p] = "|"
                }
                else {
                    new[p] = grid[p]
                }
            }
            else if grid[p] == "|" {
                let count = ad.map { grid[$0] }.filter { $0 == "#" }.count
                if count >= 3 {
                    new[p] = "#"
                }
                else {
                    new[p] = grid[p]
                }
            }
            else if grid[p] == "#" {
                let c1 = ad.map { grid[$0] }.filter { $0 == "#" }.count
                let c2 = ad.map { grid[$0] }.filter { $0 == "|" }.count
                if c1 >= 1 && c2 >= 1 {
                    new[p] = "#"
                }
                else {
                    new[p] = "."
                }
            }
        }

        grid = new
    }

    func resourceValue() -> Int {
        grid.values.filter { $0 == "#" }.count * grid.values.filter { $0 == "|" }.count
    }
}

func partOne() -> String {
    var grid = Grid.init(input)
//    grid.debugPrint()

    for _ in 1...10 {
        grid.tick()
//        grid.debugPrint()
    }

    return grid.resourceValue().description
}

func partTwo() -> String {
    return ""
}

print("Part One answer is: \(partOne())")
print("Part Two answer is: \(partTwo())")
